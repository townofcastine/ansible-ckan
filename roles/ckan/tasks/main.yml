---
# file: tasks/main.yml

- name: Install ckan dependencies
  apt: name={{ item }} update_cache=yes state=latest
  with_items:
    - git-core
    - libpq-dev
    - python-dev
    - python-pip
    - python-virtualenv
    - python-psycopg2
    - python-setuptools
    - redis-server

- name: Upgrade python-pip
  command: pip install --upgrade pip

- name: Create ckan system user account
  when: ckan_user is defined
  user: name={{ ckan_user.name }} system={{ ckan_user.system }} createhome=yes home={{ ckan_user.home_path }} shell={{ ckan_user.shell }} comment="{{ckan_user.description}}"

- name: Install setuptools
  become_user: "{{ ckan_user.name }}"
  pip: name=setuptools version=36.6.0 virtualenv={{ ckan_virtualenv }} state=present

- name: Install paster
  become_user: "{{ ckan_user.name }}"
  pip: name=paster virtualenv={{ ckan_virtualenv }} state=present

- name: Install ckan
  become_user: "{{ ckan_user.name }}"
  pip: name="{{ckan_src_url}}" virtualenv={{ ckan_virtualenv }} state=present

- name: Create ckan postgresql user
  become_user: postgres
  postgresql_user: name={{ ckan_db.username }} password={{ ckan_db.password }}
  tags: postgresql

- name: Create ckan postgresql database
  become_user: postgres
  postgresql_db: name={{ ckan_db.dbname }} encoding='UTF-8' template='template0' owner={{ ckan_db.username }}
  tags: postgresql

- name: Create ckan config dir.
  file: path={{ ckan_conf_dir }} owner={{ ckan_user.name }} group={{ ckan_user.name }} mode=0755 state=directory

# NOTE: Add production.ini template
- name: Copy ckan production.ini config file
  template: src="production-{{ ckan_version }}.ini.j2" dest="{{ ckan_conf_dir }}/production.ini" owner={{ ckan_user.name }} group={{ ckan_user.name }} mode=0644
  notify: reload apache2
  tags: postgresql

- name: Initialize ckan database
  command: "/usr/local/bin/paster db init -c {{ ckan_conf_dir}}/production.ini"
  tags: postgresql

- name: Create ckan data uploads dir.
  file: path={{ ckan_storage_path }} owner=www-data group={{ ckan_user.name }} mode=0775 state=directory
- name: Generate beaker secret token
  command: "{{ ckan_virtualenv }}/bin/python -c 'import os; import binascii; binascii.hexlify(os.urandom(24))'"
  register: beaker_secret_token

- name: Set beaker.session.secret in production.ini
  lineinfile: regexp="^beaker\.session\.secret\ =$" line="beaker.session.secret = {{ beaker_secret_token.stdout }}" dest="{{ ckan_conf_dir }}/production.ini" backrefs=yes state=present
  when: beaker_secret_token is defined

- name: Generate ckan aplication instance UUID
  command: "{{ ckan_virtualenv }}/bin/python -c 'import uuid; print str(uuid.uuid4())'"
  register: app_instance_uuid

- name: Set app_instance_uuid in production.ini
  lineinfile: regexp="^app_instance_uuid =$" line="app_instance_uuid = {{ app_instance_uuid.stdout }}" dest="{{ ckan_conf_dir }}/production.ini" backrefs=yes state=present
  when: app_instance_uuid is defined

- name: Symlink who.ini to ckan config. dir
  file: src="{{ ckan_virtualenv }}/src/ckan/who.ini" dest="{{ ckan_conf_dir }}/who.ini" owner={{ ckan_user.name }} group={{ ckan_user.name }} state=link

## TODO: copy solr schema.xml. what about multi-core/multi-ckan instances ??
- name: Configure solr core used by ckan
#  command: /bin/cp -a {{ ckan_virtualenv }}/src/ckan/ckan/config/solr/schema.xml {{ solr_var_dir }}/data/{{ item }}/conf/schema.xml creates={{ solr_var_dir }}/data/{{ item }}/conf/schema.xml
  command: /bin/cp -a {{ ckan_virtualenv }}/src/ckan/ckan/config/solr/schema.xml {{ solr_var_dir }}/data/{{ item }}/conf/schema.xml
  notify: reload solr
  with_items: "{{ solr_cores }}"
  tags: solr

- name: Create apache2 default vhost for ckan
  template: src="apache/000-ckan-default.conf.j2" dest="/etc/apache2/sites-available/000-default.conf" owner=root group=root mode=0644
  notify: reload apache2
  tags:
    - ckan
    - apache

- name: Enable apache2 default vhost for ckan
  file: src="/etc/apache2/sites-available/000-default.conf" dest="/etc/apache2/sites-enabled/000-default.conf" state=link owner=root group=root mode=0644
  notify: reload apache2
  tags:
    - ckan
    - apache

- name: Create apache2 WSGI file
  template: src="apache/ckan-apache.wsgi.j2" dest="{{ ckan_conf_dir }}/apache.wsgi" owner={{ ckan_user.name }} group={{ ckan_user.name }} mode=0644
  notify: reload apache2
  tags:
    - ckan
    - apache

- name: Create nginx default vhost for ckan
  template: src="nginx/default-vhost.conf.j2" dest="/etc/nginx/conf.d/default.conf" owner=root group=root mode=0644
  notify: reload nginx
  tags:
    - ckan
    - nginx

# vim: set sw=2 ts=2:
